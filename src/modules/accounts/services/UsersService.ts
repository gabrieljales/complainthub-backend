import { hash } from "bcrypt";
import { AppError } from "../../../shared/errors/App.Error";
import { User } from "../infra/typeorm/entities/User";
import { UsersRepository } from "../infra/typeorm/repositories/UsersRepository";
import { ICreateUserDTO } from "../dtos/ICreateUserDTO";
import { Complaint } from "../../complaints/infra/typeorm/entities/Complaint";
import { SendGridMailProvider } from "../../../shared/providers/mail/SendGridMailProvider";
import { IMailDTO } from "../../../shared/providers/mail/IMailDTO";

export class UsersService {
  // M√©todo respons√°vel por criar um usu√°rio
  async create({
    email,
    last_name,
    name,
    password,
    type
  }: ICreateUserDTO): Promise<void> {
    const mailProvider = new SendGridMailProvider();

    const msg: IMailDTO = {
      to: email,
      from: {
        name: "ComplaintHub",
        email: process.env.MAIL_SENDER,
      },
      subject: "Cadastro na plataforma ComplaintHub",
      text: "Oi! Bem-vindo(a) ao Complainthub, a casa dos insatisfeitos e inconformados. Junte-se a n√≥s e vamos fazer barulho juntos! üì£"
    };

    // Verificando a partir do email se o usu√°rio j√° existe
    const userAlreadyExists = await this.findByEmail(email);

    // Se existir, devemos lan√ßar um erro
    if (userAlreadyExists) {
      throw new AppError("User already exists");
    }

    // Criptografando a senha antes de salvar
    const hashedPassword = await hash(password, 8);

    // Criando uma nova inst√¢ncia da entidade User
    const newUser = UsersRepository.create({
      email,
      last_name,
      name,
      password: hashedPassword,
      type
    });

    // Salvando o usu√°rio no banco
    // Veja que esse m√©todo retorna uma Promise, por isso o uso do await
    await UsersRepository.save(newUser);

    // Enviando email de confirma√ß√£o de cadastro para o usu√°rio
    await mailProvider.sendMail(msg).catch(console.error);
  }

  // M√©todo respons√°vel por listar todos os usu√°rios
  async list(): Promise<User[]> {
    return await UsersRepository.find();
  }

  // M√©todo respons√°vel por buscar um usu√°rio por id
  // Observa√ß√£o: relations √© um par√¢metro opcional para quando quisermos incluir uma rela√ß√£o na busca
  async findById(id: number, relations?: string[]): Promise<User> {
    const user = await UsersRepository.findOne({ where: { id }, relations });
  
    return user;
  }

  // M√©todo respons√°vel por buscar um usu√°rio por email
  async findByEmail(email: string): Promise<User> {
    const user = await UsersRepository.findOne({ where: { email } });

    return user;
  }

  // M√©todo respons√°vel por buscar reclama√ß√µes por id do usu√°rio
  async findAllComplaintsByUserId(user_id: number): Promise<Complaint[]> {
    const user = await this.findById(user_id, ["complaints"]);
  
    // Se o usu√°rio n√£o existir, devemos lan√ßar um erro BadRequest
    if (!user) {
      throw new AppError("User not found", 404);
    }

    // Ordenar as reclama√ß√µes, por ID, em ordem decrescente e sem alterar o array original
    const userComplaintsInDescOrder = [...user.complaints].sort((a, b) => b.id - a.id);
  
    return userComplaintsInDescOrder;
  }
}